# 영속성 컨텍스트란?

'엔터티를 영구 저장하는 환경'

entityManager.persist(member);
: 엔터티매니저를 사용해서 회원 엔터티를 영속성 컨텍스트에 저장한다.
: 엔터티매니저를 통해서 영속성 컨텍스트에 접근할 수 있고, 관리할 수 있다.


# 엔터티 생명주기
1. 비영속: 영속성컨텍스트와 전혀 관계가 없는 상태 (객체를 생성한 상태)
    Member member = new Member();
    member.setId(id);
    member.setUsername("윤진");
    member.setAge(30);
2. 영속: 영속성 컨텍스트에 저장된 상태 (객체를 저장한 상태) -> 영속성 컨텍스트에 의해 관리된다는 뜻이다.
    entityManager.persist(member);
    entityManager.find();
    JPQL을 사용해 조회한 경우
3. 준영속: 영속성 컨텍스트에 저장되었다가 분리된 상태
    entityManager.detach(member);
    entityManager.clear();
    entityManager.close();
4. 삭제: 삭제된 상태
    entityManager.remove(member);


# 특징
1. persistence context와 식별자 값
    - pk(식별자 값)이 반드시 있어야 한다.
2. persistence context와 DB 저장
    - JPA는 보통 트랜젝션을 커밋하는 순간 영속성 컨텍스트에 새로 저장된 엔터티를 DB에 반영하는데 이것을 플러시(flush) 라고 한다.

3. persistence context가 엔터티를 관리하는 경우 장점
    - 1차 캐시
    - 동일성 보장
    - 트랜잭션을 지원하는 쓰기 지원
    - 변경 감지
    - 지연 로딩

# 엔터티 조회
내부캐시 - 1차 캐시
persistence context 내부에 Map이 하나있고 키는 @Id로 매핑한 식별자고 값은 엔터티 인스턴스다.
    // 엔터티를 생성한 상태(비영속)
    Member member = new Member();
    member.setId(id);
    member.setUsername("윤진");
    member.setAge(30);

    // 엔터티를 영속
    entityManager.persist(member);
    --> 1차 캐시에 회원 엔터티를 저장한다. 회원엔터티는 아직 데이터베이스에 저장되지 않았다.

    // find()를 호출하면 먼저 1차 캐시에서 엔터티를 찾고 만약 찾는 엔터티가 1차캐시에 없으면 DB에서 조회한다.
    Member findMember = entityManager.find(Member.class, id);

    --------1차캐시--------
      @Id     |   Entity
    "member1" |  "member"


# 트랜잭션을 지원하는 쓰기 지연이 가능한 이유

begin(); // 트랜잭션 시작

save(A);
save(B);
save(C);

commit(); // 트랜잭션 커밋

1. 데이터를 저장하는 즉시 등록 쿼리를 데이터베이스에 보낸다. 마지막에 트랜잭션을 커밋한다.
2. 데이터를 저장하면 등록 쿼리를 데이터베이스에 보내지 않고 메모리에 모아둔다. 모아둔 등록쿼리를 데이터베이스에 보낸뒤 커밋한다.

2개의 실행결과는 같다. ABC모두 트랜잭션을 커밋하면 함께 저장되고 롤백되면 함께 저장되지 않는다.
어떻게는 커밋 직전에만 디비에 SQL을 전달하면 된다. -> 이것이 트랜잭션을 지원하는 쓰기 지연이 가능한 이유이다.
이 기능을 활용하면 모아둔 등록 쿼리를 데이터베이스에 한번에 전달해서 성능을 최적화 할 수 있다....



# 변경감지
1. 트랜잭션을 커밋하면 엔터티매니저 내부에서 먼저 플러시flush가 호출된다.
2. 엔터티와 스냅샷을 비교해서 변경된 엔터티를 찾는다.
3. 변경된 엔터티가 있으면 수정쿼리를 생성해서 쓰기 지연 SQL저장소에 보낸다.
4. 쓰기 지연 저장소의 SQL을 디비에 보낸다.
5. 디비 트랜잭션을 커밋한다.

===> 변경감지는 영속성 컨텍스트가 관리하는 영속 상태의 엔터티에만 적용된다.
수정한 데이터만 반영하는게 아니라 실제는 엔터티의 모든 필드를 수정에 반영한다.
데이터 전송량이 증가하는 단점이 있지만, 다음과 같은 장점으로 인해 모든 필드를 업데이트 한다.
- 모든 필드를 사용하면 수정쿼리가 항상 같다. (바인딩되는 데이터는 다르다.) 따라서 애플리케이션 로딩 시점에 수정쿼리를
미리 생성해두고 재사용할 수 있다.
- 데이터베이스에 동일한 쿼리를 보내면 데이터베이스는 이전에 한번 파싱된 쿼리를 재사용할 수 있다.

* 필드가 많거나 저장되는 내용이 너무 크면 수정된 데이터만 사용해서 동적으로 업데이트SQL을 생성하는 전략을 선택하면 된다.
이때는 하이버네이트 확장 기능을 사용해야 한다.
@Entity
@org.hibernate.annotation.DynamicUpdate  <--- *
@Table(name = "Member")
public class Member {...}

* 데이터가 존재하는 필드만으로 insert sql 을 동적으로 생성하는 @DynamicInsert도 있다.
* 상황에 따라 다르지만 컬럼이 대략 30개가 넘어가면 정적 수정 쿼리보다 @DynamicUpdate를 사용한 동적 수정쿼리가 빠르다고 한다.
(근대 이런경우는 설계상 테이블이 분리되지 않았을 가능성이 높지)

# 엔터티 삭제
* 삭제하려면 먼저 삭제 대상 엔터티를 조회해야 한다.
Member member = entityManager.find(Member.class, id); // 삭제 대상 엔터티 조회
entityManager.remote(member);
    엔터티를 즉시 삭제하는 것이 아니라 엔터티 등록과 비슷하게 삭제 쿼리를 쓰기지연 SQL저장소에 등록한다. 이후 트랜잭션을 커밋해서
    플러시를 호출하면 실제 데이터베이스에 삭제 쿼리를 전달한다.
    remove를 호출하는 순간 member는 영속성 컨텍스트에서 제거된다.
    이렇게 삭제된 엔터티는 재사용하지 말고 자연스럽게 가비지컬렉션의 대상이 되도록 두는 것이 좋다 *

# 플러시 (flush())
* 영속성 컨텍스트의 변경 내용을 데이터베이스에 반영한다.
1. 변경감지가 동작해서 영컨에 있는 모든 엔터티를 스냅샷과 비교해서 수정된 엔터티를 찾는다. 수정된 엔티티는 수정쿼리를 만들어
쓰기 지연 SQL저장소에 등록한다.
2. 쓰기지연 SQL저장소의 쿼리를 데이터베이스에 전송한다.(등록,수정,삭제 쿼리)

 - 플러시 하는 방법
    1. 직접 호출 : entityManager.flush()
        *강제플러시, 테스트나 다른 프레임워크와 함께 jpa를 사용할때를 제외하고는 거의 사용하지 않음.
    2. 트랜잭션 커밋시 플러시 자동호출
        * 디비에 변경내용을 sql로 전달하지 않고 트랜잭션만 커밋하면 어떤 데이터도 디비에 반영되지 않는다.
        트랜잭션을 커밋하기 전에 꼭 플러시를 호출해서 영속성컨텍스트의 변경내용을 디비에 반영해야 한다.
        jpa는 트랜잭션을 커밋할때 플러시를 자동으로 호출한다.
    3. JPQL 쿼리 실행시 플러시가 자동호출
        * jpql이나 Criteria같은 객체지향 쿼리를 호출할 때도 플러시가 실행된다.

        entityManager.persist(memberA);
        entityManager.persist(memberB);
        entityManager.persist(memberC);
        // 멤버 ABC를 영속상태로 만들었다. 영속성컨텍스트에는 있지만 아직 데이터베이스에는 반영되지 않음.
        query = entityManager.createQuery("select m from Member m", Member.class);
        // jpql은 sql로 변환되어 디비에서 엔터티를 조회한다. 그런데 ABC가 아직은 디비에 없으므로 쿼리 결과로 조회되지 않는다.
        // 그래서 쿼리를 실행하기 전에 영속성 컨텍스트를 플러시해서 변경 내용을 디비에 반영해야 한다.
        // jpa는 이런 문제를 예방하기 위해 jpql을 실행할 때도 플러시를 자동 호출한다.
        List<Member> members = query.getResultList();

        * 참고로 식별자를 기준으로 조회하는 find() 메소드를 호출할 때는 플러시가 실행되지 않는다.

 - 플러시 모드 옵션
    FlushModeType.AUTO : 커밋이나 쿼리를 실행할 때 플러시(기본값)
    FlushModeType.COMMIT : 커밋할 때만 플러시

    entityManager.setFlushMode(FlushModeType.COMMIT); // 플러시모드 직접 설정

** 영속성 컨텍스트의 변경 내용을 디비에 동기화하는 것이 플러시다.

## 준영속
    영속성 컨텍스트가 관리하는 영속 상태의 엔티티가 영속성 컨텍스트에서 분리된(detached) 것을 준영속 상태라고 한다.
    준영속상태의 엔터티는 영속성 컨텍스트가 제공하는 기능을 사용할 수 없다.

    1. entityManager.detach(entity) : 특정 엔터티만 준영속 상태로 전환한다.


    2. entityManager.clear() : 영속성 컨텍스트를 완전히 초기화한다.
    3. entityManager.close() : 영속성 컨텍스트를 종료한다.

* 영속상태의 엔티티는 주로 영속성 컨텍스트가 종료되면서 준영속 상태가 된다. 개발자가 직접 준영속 상태로 만드는 일은 드물다.

# 준영속 상태의 특징
    * 거의 비영속 상태에 가깝다 - 어떠한 기능도 동작하지 않는다.(1차캐시,쓰기지연,변경감지,지연로딩 등)
    * 식별자 값을 가지고 있다 - 이미 한번 영속상태였으므로 반드시 식별자 값을 가지고 있다.
    * 지연로딩을 할 수 없다 - lazy loading은 실제 객체 대신 프록시 객체를 로딩해두고 해당 객체를 실제 사용할 때
                            영속성 컨텍스트를 통해 데이터를 불러오는 방법이다. 하지만 준영속상태는 영속성 컨텍스트가
                            더는 관리하지 않으므로 지연로딩시 문제가 발생한다...


# 병합(merge()) : 준영속상태의 엔티티를 받아서 그 정보로 새로운 영속상태의 엔티티를 반환한다.
    public <T> T merge(T entity);

    Member mergeMember = entityManager(member);

























